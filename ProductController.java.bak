package com.sb.controller;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.sb.exception.ResourceNotFoundException;
import com.sb.model.Product1;
import com.sb.repository.ProductRepository;
import com.sb.service.ProductService;


@RestController
@RequestMapping("/proApi")
public class ProductController {
@Autowired
ProductService productsercive;

@Autowired
ProductRepository productRepository;

@GetMapping("/readAll")
public ResponseEntity<List<Product1>> getAllProducts(@RequestParam String name) {
	try {
		List<Product1> products = new ArrayList<Product1>();

		if (name == null)
			productRepository.findAll().forEach(products::add);
		else
			productRepository.findByNameContaining(name).forEach(products::add);

		if (products.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}

		return new ResponseEntity<>(products, HttpStatus.OK);
	} catch (Exception e) {
		return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

//Pathvariable

@GetMapping("/product/{Id}")
public ResponseEntity < Product1 > getItemsById
(@PathVariable(value = "id") Integer ProductsId)
throws ResourceNotFoundException{
	Product1 product = productRepository.findById(ProductsId)
        .orElseThrow(() -> new ResourceNotFoundException("Your Entered Item Number is not available in Database,Could you please try with other Item Number :: " + ProductsId));
    return ResponseEntity.ok().body(product);
	/*RQ_1361_Code changes_Start/*

	@GetMapping("/product/{Id}")
public ResponseEntity < Product1 > getItemsById
(@PathVariable(value = "id") Integer ProductsId)
throws ResourceNotFoundException{
	Product1 product = productRepository.findById(ProductsId)
        .orElseThrow(() -> new ResourceNotFoundException("Your Entered Item Number is not available in Database,Could you please try with other Item Number :: " + ProductsId));
    return ResponseEntity.ok().body(product);
/*RQ_1361_Code changes_End/*

}

//validation
/*RQ_1361_Code changes_Start/*
@PostMapping("/tutorials")
public ResponseEntity<Product1> createProduct(@Valid @RequestBody Product1 product) {
	try {
		Product1 t = productsercive.saveOrUpdate(product);
/*RQ_1361_Code changes_End/*


@PostMapping("/tutorials")
public ResponseEntity<Product1> createProduct(@Valid @RequestBody Product1 product) {
	try {
		Product1 t = productsercive.saveOrUpdate(product);
		return new ResponseEntity<>(t, HttpStatus.CREATED);
	} catch (Exception e) {
		return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}


/*@PostMapping("/create")
private int saveProduct(@RequestBody Product1 product) 
{
	productsercive.saveOrUpdate(product);

return product.getId();
}

@GetMapping("/product")
private List<Product1> getAllProduct1() 
{
return productsercive.getAllProduct1();
}

@GetMapping("/product/{id}")
private Product1 getProduct1(@PathVariable("id") int id) 
{
return productsercive.getProductById(id);
}
@DeleteMapping("/product/{id}")
private void deleteProduct1(@PathVariable("id") int id) 
{
	productsercive.delete(id);
}
@PutMapping("/products")  
private Product1 update(@RequestBody Product1 product)   
{  
	productsercive.saveOrUpdate(product);  
return product;
}
*/

}
